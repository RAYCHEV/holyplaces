// –ö–æ–ø–∏–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ
let editableData = JSON.parse(JSON.stringify(holyplacesDatabase.holyplaces));
let currentEditIndex = -1;
let mapPicker = null;
let selectedMarker = null;
let tempCoords = { lat: null, lng: null };

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    renderTable();
    
    // Form submit handler
    document.getElementById('placeForm').addEventListener('submit', function(e) {
        e.preventDefault();
        savePlace();
    });
    
    // Event delegation –∑–∞ –±—É—Ç–æ–Ω–∏—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
    document.getElementById('tableBody').addEventListener('click', function(e) {
        if (e.target.classList.contains('btn-edit')) {
            const index = parseInt(e.target.getAttribute('data-index'));
            editPlace(index);
        } else if (e.target.classList.contains('btn-delete')) {
            const index = parseInt(e.target.getAttribute('data-index'));
            deletePlace(index);
        }
    });
});

// –†–µ–Ω–¥–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
function renderTable() {
    const tbody = document.getElementById('tableBody');
    tbody.innerHTML = '';
    
    editableData.forEach((place, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${place.name}</td>
            <td>${place.type}</td>
            <td>${place.denomination}</td>
            <td>${place.city}</td>
            <td>${place.latitude.toFixed(4)}, ${place.longitude.toFixed(4)}</td>
            <td>
                <div class="action-buttons">
                    <button class="btn-edit btn-small" data-index="${index}">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–∞–π</button>
                    <button class="btn-delete btn-small" data-index="${index}">üóëÔ∏è –ò–∑—Ç—Ä–∏–π</button>
                </div>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–∞–ª –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ
function showAddModal() {
    currentEditIndex = -1;
    document.getElementById('modalTitle').textContent = '–î–æ–±–∞–≤–∏ –Ω–æ–≤–æ –º—è—Å—Ç–æ';
    document.getElementById('placeForm').reset();
    document.getElementById('editIndex').value = '-1';
    document.getElementById('placeId').disabled = false;
    document.getElementById('editModal').style.display = 'block';
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º—è—Å—Ç–æ
function editPlace(index) {
    currentEditIndex = index;
    const place = editableData[index];
    
    document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π –º—è—Å—Ç–æ';
    document.getElementById('editIndex').value = index;
    
    // –ü–æ–ø—ä–ª–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    document.getElementById('placeId').value = place.id;
    document.getElementById('placeId').disabled = true; // ID –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –ø—Ä–æ–º–µ–Ω—è
    document.getElementById('placeName').value = place.name;
    document.getElementById('placeType').value = place.type;
    document.getElementById('placeDenomination').value = place.denomination;
    document.getElementById('placeCity').value = place.city;
    document.getElementById('placeAddress').value = place.address;
    document.getElementById('placeDescription').value = place.description;
    document.getElementById('placeLatitude').value = place.latitude;
    document.getElementById('placeLongitude').value = place.longitude;
    document.getElementById('placeWorkingHours').value = place.workingHours || '';
    document.getElementById('placePhone').value = place.phone || '';
    document.getElementById('placeWebsite').value = place.website || '';
    
    document.getElementById('editModal').style.display = 'block';
}

// –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –º—è—Å—Ç–æ
function savePlace() {
    const index = parseInt(document.getElementById('editIndex').value);
    
    const placeData = {
        id: document.getElementById('placeId').value.toLowerCase().replace(/\s+/g, '-'),
        name: document.getElementById('placeName').value,
        type: document.getElementById('placeType').value,
        denomination: document.getElementById('placeDenomination').value,
        city: document.getElementById('placeCity').value,
        address: document.getElementById('placeAddress').value,
        description: document.getElementById('placeDescription').value,
        latitude: parseFloat(document.getElementById('placeLatitude').value),
        longitude: parseFloat(document.getElementById('placeLongitude').value),
        workingHours: document.getElementById('placeWorkingHours').value || '',
        phone: document.getElementById('placePhone').value || '',
        website: document.getElementById('placeWebsite').value || '',
        image: ""
    };
    
    if (index === -1) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —É–Ω–∏–∫–∞–ª–µ–Ω ID
        if (editableData.some(p => p.id === placeData.id)) {
            alert('–í–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –º—è—Å—Ç–æ —Å —Ç–æ–∑–∏ ID!');
            return;
        }
        editableData.push(placeData);
    } else {
        editableData[index] = placeData;
    }
    
    renderTable();
    closeModal();
    
    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ
    alert('–ü—Ä–æ–º–µ–Ω–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏! –ù–µ –∑–∞–±—Ä–∞–≤—è–π—Ç–µ –¥–∞ –∏–∑—Ç–µ–≥–ª–∏—Ç–µ –Ω–æ–≤–∏—è data.js —Ñ–∞–π–ª.');
}

// –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –º—è—Å—Ç–æ
function deletePlace(index) {
    const place = editableData[index];
    if (confirm(`–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ "${place.name}"?`)) {
        editableData.splice(index, 1);
        renderTable();
        alert('–ú—è—Å—Ç–æ—Ç–æ –µ –∏–∑—Ç—Ä–∏—Ç–æ! –ù–µ –∑–∞–±—Ä–∞–≤—è–π—Ç–µ –¥–∞ –∏–∑—Ç–µ–≥–ª–∏—Ç–µ –Ω–æ–≤–∏—è data.js —Ñ–∞–π–ª.');
    }
}

// –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª
function closeModal() {
    document.getElementById('editModal').style.display = 'none';
    document.getElementById('placeForm').reset();
}

// –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
function showMapModal() {
    document.getElementById('mapPickerModal').style.display = 'block';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞ —Å–ª–µ–¥ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∞
    setTimeout(() => {
        if (!mapPicker) {
            const lat = parseFloat(document.getElementById('placeLatitude').value) || 42.6977;
            const lng = parseFloat(document.getElementById('placeLongitude').value) || 23.3219;
            
            mapPicker = L.map('mapModal').setView([lat, lng], 13);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(mapPicker);
            
            // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä –∞–∫–æ –∏–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
            if (document.getElementById('placeLatitude').value) {
                selectedMarker = L.marker([lat, lng]).addTo(mapPicker);
                tempCoords = { lat, lng };
                document.getElementById('selectedCoords').textContent = 
                    `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
            }
            
            // –ö–ª–∏–∫ –≤—ä—Ä—Ö—É –∫–∞—Ä—Ç–∞—Ç–∞
            mapPicker.on('click', function(e) {
                if (selectedMarker) {
                    mapPicker.removeLayer(selectedMarker);
                }
                
                selectedMarker = L.marker([e.latlng.lat, e.latlng.lng]).addTo(mapPicker);
                tempCoords = { lat: e.latlng.lat, lng: e.latlng.lng };
                
                document.getElementById('selectedCoords').textContent = 
                    `${e.latlng.lat.toFixed(6)}, ${e.latlng.lng.toFixed(6)}`;
            });
        } else {
            mapPicker.invalidateSize();
        }
    }, 100);
}

// –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞ –º–æ–¥–∞–ª
function closeMapModal() {
    document.getElementById('mapPickerModal').style.display = 'none';
}

// –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
function applyCoordinates() {
    if (tempCoords.lat && tempCoords.lng) {
        document.getElementById('placeLatitude').value = tempCoords.lat.toFixed(6);
        document.getElementById('placeLongitude').value = tempCoords.lng.toFixed(6);
        closeMapModal();
    } else {
        alert('–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞!');
    }
}

// –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏—è (–∏–∑–ø–æ–ª–∑–≤–∞ Nominatim API)
function searchLocation(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        const query = document.getElementById('mapSearch').value;
        
        if (!query) return;
        
        // –¢—ä—Ä—Å–µ–Ω–µ —á—Ä–µ–∑ Nominatim
        fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}, –ë—ä–ª–≥–∞—Ä–∏—è&limit=1`)
            .then(response => response.json())
            .then(data => {
                if (data && data.length > 0) {
                    const result = data[0];
                    const lat = parseFloat(result.lat);
                    const lng = parseFloat(result.lon);
                    
                    // –¶–µ–Ω—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞
                    mapPicker.setView([lat, lng], 15);
                    
                    // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä
                    if (selectedMarker) {
                        mapPicker.removeLayer(selectedMarker);
                    }
                    
                    selectedMarker = L.marker([lat, lng]).addTo(mapPicker);
                    tempCoords = { lat, lng };
                    
                    document.getElementById('selectedCoords').textContent = 
                        `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                } else {
                    alert('–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ —Ç–æ–≤–∞ —Ç—ä—Ä—Å–µ–Ω–µ!');
                }
            })
            .catch(error => {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ:', error);
                alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏—è!');
            });
    }
}

// –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –∏ –∏–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ data.js —Ñ–∞–π–ª
function generateAndDownloadDataJS() {
    const dataContent = `const holyplacesDatabase = {
  "holyplaces": ${JSON.stringify(editableData, null, 2)}
};`;
    
    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ blob
    const blob = new Blob([dataContent], { type: 'text/javascript' });
    
    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ download link
    const downloadLink = document.createElement('a');
    downloadLink.href = URL.createObjectURL(blob);
    downloadLink.download = 'data.js';
    
    // –ö–ª–∏–∫–≤–∞–Ω–µ –Ω–∞ –ª–∏–Ω–∫–∞
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ URL
    URL.revokeObjectURL(downloadLink.href);
    
    alert('–§–∞–π–ª—ä—Ç data.js –µ –∏–∑—Ç–µ–≥–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
}

// –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫ –∏–∑–≤—ä–Ω —Ç—è—Ö
window.onclick = function(event) {
    if (event.target.classList.contains('modal')) {
        event.target.style.display = 'none';
    }
}

// –ì–ª–æ–±–∞–ª–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –¥–æ—Å—Ç—ä–ø –æ—Ç HTML
window.showAddModal = showAddModal;
window.closeModal = closeModal;
window.showMapModal = showMapModal;
window.closeMapModal = closeMapModal;
window.applyCoordinates = applyCoordinates;
window.searchLocation = searchLocation;
window.generateAndDownloadDataJS = generateAndDownloadDataJS;